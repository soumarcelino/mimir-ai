name: Build and Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build mimir-ai
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_FIREBASE_API_KEY: ${{ vars.NEXT_PUBLIC_FIREBASE_API_KEY }}
      NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ vars.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
      NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ vars.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
      NEXT_PUBLIC_FIREBASE_APP_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_APP_ID }}
      NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: ${{ vars.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID }}
      BUNDLE_ANALYZE: ${{ vars.BUNDLE_ANALYZE }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://npm.pkg.github.com"
          scope: "@soumarcelino"

      - name: Install Yarn
        run: npm install -g yarn

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            .next/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install Dependencies
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Package Version
        run: |
          yarn release:update-package-only
      - name: Show Next Release Version
        run: |
          echo "Next Release Version: $NEXT_RELEASE_VERSION"

      - name: Bump Version
        if: ${{ env.NEXT_RELEASE_VERSION != '' }}
        run: yarn version --new-version $NEXT_RELEASE_VERSION --no-git-tag-version
      - name: Build Application
        run: yarn build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-build
          path: ./out
      
      - name: Upload analyze artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analyze-artifacts
          path: .next/analyze

  deploy:
    name: Deploy to S3
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: nextjs-build
          path: ./out

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Deploy to S3 Bucket
        run: aws s3 sync ./out s3://mimir-ai-site --delete

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Collect commits since last release
        id: commit-list
        run: |
            git fetch --tags --unshallow || git fetch --tags
            
            LAST_TAG=$(git describe --tags --abbrev=0 --always || echo "HEAD")
            COMMITS=$(git log --pretty=format:'- %s' $LAST_TAG..HEAD)

            # Replace newlines with the literal string '\n'
            COMMITS="${COMMITS//'%'/'%25'}"
            COMMITS="${COMMITS//$'\n'/'%0A'}"
            COMMITS="${COMMITS//$'\r'/'%0D'}"

            echo "::set-output name=commits::$COMMITS"
            echo "Commits desde a última release ($LAST_TAG) até agora na branch main:"
            echo "$COMMITS"

      - name: Bump version
        run: yarn version --patch

      - name: Extract version
        id: get_version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Print Release Details
        run: |
          echo "Release created with the following details:"
          echo "Tag: ${{ steps.get_version.outputs.new_version }}"
          echo "Release Name: ${{ steps.get_version.outputs.new_version }}"
          echo "Commits:"
          echo "${{ steps.commit-list.outputs.commits }}"
